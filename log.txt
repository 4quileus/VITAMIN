!<{1,2}, 2>Fh
!(AFh)
Envolved agents: [1, 2]
actions picked by each agent:{'agent1': ['A', 'B', 'C'], 'agent2': ['D', 'C']}
['a' 'b' 'c' 'd' 'e' 'f' 'g' 'h']
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 'AC,BC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 'AC,BC'], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 'AC,BC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 'AC,BC'], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 'AC,BC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 'AC,BC'], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 'AC,BC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 'AC,BC'], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 'AC,BC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 'AC,BC'], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 'AC,BC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 'AC,BC'], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 'AC,BC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 'AC,BC'], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 'BD', 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 'BC', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['AC', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], ['BD', 0, 'II', 'AD'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC', 'IC', 'II', 'BC'], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 'AC,BC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC,BC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'AD,BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 'AC,BC'], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 'AD,BD', 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 'AC'], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AD', 0, 0], [0, 'II', 'AD', 0], [0, 0, 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC', 0, 'IC'], [0, 'II', 0, 'AC'], ['AC', 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 'AC,AD', 0, 'IC'], [0, 'II', 'AD', 'AC'], ['AC', 'IC', 'II', 'AD'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 'BC'], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 'BD', 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BD', 0], [0, 'II', 'BD', 0], ['BD', 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC', 'IC'], [0, 'II', 0, 'BC'], [0, 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 'BC,BD', 'IC'], [0, 'II', 'BD', 'BC'], ['BD', 'IC', 'II', 'BC'], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 'CI', 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 'CI', 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !a
('!', 'a')
root is: 
       ______!
      /
{'s3', 's0'}

node left: 
{'s3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !b
('!', 'b')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !c
('!', 'c')
root is: 
    ___!
   /
{'s2'}

node left: 
{'s2'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !d
('!', 'd')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !e
('!', 'e')
root is: 
    ___!
   /
{'s1'}

node left: 
{'s1'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !f
('!', 'f')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !g
('!', 'g')
root is: 
    __!
   /
set()

node left: 
set()

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
initial transition matrix: [['II', 'AC,AD', 'BC,BD', 'IC'], [0, 'II', 'AD,BD', 'AC,BC'], ['AC,BD', 'IC', 'II', 'AD,BC'], [0, 'CI', 0, 'II']]
actions_agent1
['A', 'B', 'C']
actions_agent2
['D', 'C']
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 'IC'], [0, 'II', 0, 0], [0, 'IC', 'II', 0], [0, 0, 0, 'II']] modified by agent 1
formula to parse: !h
('!', 'h')
root is: 
             ____________!
            /
{'s1', 's2', 's3', 's0'}

node left: 
{'s1', 's2', 's3', 's0'}

<class 'binarytree.Node'>
new transition matrix: [['II', 0, 0, 0], [0, 'II', 0, 0], [0, 0, 'II', 0], [0, 0, 0, 'II']] modified by agent 2
formula to parse: !(AFh)
None
{'res': 'Syntax Error', 'initial_state': ''}
False, no states satisfying !(AFh) have been found!
(None, 2, None)
