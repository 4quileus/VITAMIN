
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND DEMONIC EVENTUALLY GLOBALLY IMPLIES LPAREN NEXT NOT OR PROP RELEASE RPAREN UNTIL WEAKexpression : expression AND expression\n                  | expression OR expression\n                  | expression IMPLIES expressionexpression : DEMONIC expression UNTIL expression\n                  | DEMONIC expression WEAK expression\n                  | DEMONIC expression RELEASE expressionexpression : DEMONIC GLOBALLY expression\n                  | DEMONIC NEXT expression\n                  | DEMONIC EVENTUALLY expressionexpression : NOT expressionexpression : LPAREN expression RPARENexpression : PROP'
    
_lr_action_items = {'DEMONIC':([0,2,3,4,6,7,8,10,11,12,18,19,20,],[2,2,2,2,2,2,2,2,2,2,2,2,2,]),'NOT':([0,2,3,4,6,7,8,10,11,12,18,19,20,],[3,3,3,3,3,3,3,3,3,3,3,3,3,]),'LPAREN':([0,2,3,4,6,7,8,10,11,12,18,19,20,],[4,4,4,4,4,4,4,4,4,4,4,4,4,]),'PROP':([0,2,3,4,6,7,8,10,11,12,18,19,20,],[5,5,5,5,5,5,5,5,5,5,5,5,5,]),'$end':([1,5,13,15,16,17,21,22,23,24,25,26,27,],[0,-12,-10,-1,-2,-3,-7,-8,-9,-11,-4,-5,-6,]),'AND':([1,5,9,13,14,15,16,17,21,22,23,24,25,26,27,],[6,-12,6,6,6,6,6,6,6,6,6,-11,6,6,6,]),'OR':([1,5,9,13,14,15,16,17,21,22,23,24,25,26,27,],[7,-12,7,7,7,7,7,7,7,7,7,-11,7,7,7,]),'IMPLIES':([1,5,9,13,14,15,16,17,21,22,23,24,25,26,27,],[8,-12,8,8,8,8,8,8,8,8,8,-11,8,8,8,]),'GLOBALLY':([2,],[10,]),'NEXT':([2,],[11,]),'EVENTUALLY':([2,],[12,]),'UNTIL':([5,9,13,15,16,17,21,22,23,24,25,26,27,],[-12,18,-10,-1,-2,-3,-7,-8,-9,-11,-4,-5,-6,]),'WEAK':([5,9,13,15,16,17,21,22,23,24,25,26,27,],[-12,19,-10,-1,-2,-3,-7,-8,-9,-11,-4,-5,-6,]),'RELEASE':([5,9,13,15,16,17,21,22,23,24,25,26,27,],[-12,20,-10,-1,-2,-3,-7,-8,-9,-11,-4,-5,-6,]),'RPAREN':([5,13,14,15,16,17,21,22,23,24,25,26,27,],[-12,-10,24,-1,-2,-3,-7,-8,-9,-11,-4,-5,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,4,6,7,8,10,11,12,18,19,20,],[1,9,13,14,15,16,17,21,22,23,25,26,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression AND expression','expression',3,'p_expression_binary','parser.py',48),
  ('expression -> expression OR expression','expression',3,'p_expression_binary','parser.py',49),
  ('expression -> expression IMPLIES expression','expression',3,'p_expression_binary','parser.py',50),
  ('expression -> DEMONIC expression UNTIL expression','expression',4,'p_expression_ternary','parser.py',54),
  ('expression -> DEMONIC expression WEAK expression','expression',4,'p_expression_ternary','parser.py',55),
  ('expression -> DEMONIC expression RELEASE expression','expression',4,'p_expression_ternary','parser.py',56),
  ('expression -> DEMONIC GLOBALLY expression','expression',3,'p_expression_unary','parser.py',66),
  ('expression -> DEMONIC NEXT expression','expression',3,'p_expression_unary','parser.py',67),
  ('expression -> DEMONIC EVENTUALLY expression','expression',3,'p_expression_unary','parser.py',68),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',78),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',83),
  ('expression -> PROP','expression',1,'p_expression_prop','parser.py',88),
]
